## 会话技术
	1. 会话：一次会话中包含多次请求和响应。
		* 一次会话：浏览器第一次给服务器资源发送请求，会话建立，直到有一方断开为止
	2. 功能：在一次会话的范围内的多次请求间，共享数据
	3. 方式：
		1. 客户端会话技术：Cookie
		2. 服务器端会话技术：Session
		
## Cookie：
	1. 概念：客户端会话技术，将数据保存到客户端
	
	实现原理
		* 基于响应头set-cookie和请求头cookie实现

@WebServlet("/CookieServlet")
public class CookieServlet extends HttpServlet {
    protected void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
        Cookie c = new Cookie("msg","hello");
        response.addCookie(c);
    }

    protected void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
        this.doPost(request,response);
    }
}

@WebServlet("/cookie2")
public class cookie2 extends HttpServlet {
    protected void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
        Cookie[] cookies = request.getCookies();
        if (cookies!=null) {
            for (Cookie cookie : cookies) {
                System.out.println(cookie.getName() + "=" +cookie.getValue());
            }
        }

    }

    protected void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
        this.doPost(request,response);
    }
}

//msg=hello

cookie在浏览器中保存多长时间？
	1. 默认情况下，当浏览器关闭后，Cookie数据被销毁
	2. 持久化存储：
		* setMaxAge(int seconds)
			1. 正数：将Cookie数据写到硬盘的文件中。持久化存储。并指定cookie存活时间，时间到后，cookie文件自动失效
			2. 负数：默认值
			3. 零：删除cookie信息

c.setMaxAge(30); //30S内持久化存储在硬盘中

部署了多个web项目，那么在这些web项目中
	* 默认情况下cookie不能共享

	* setPath(String path):设置cookie的获取范围。默认情况下，设置当前的虚拟目录
		* 如果要共享，则可以将path设置为"/"
c.setPath("/");

不同的tomcat服务器间cookie共享
	* setDomain(String path):如果设置一级域名相同，那么多个服务器之间cookie可以共享
		* setDomain(".baidu.com"),那么tieba.baidu.com和news.baidu.com中cookie可以共享

##Case: Remember the last visit time
Requirements:
1. Visit a Servlet. If it is the first visit, you will be prompted: Hello, welcome for your first visit.
2. If it is not the first visit, you will be prompted: Welcome back, your last visit time is: display time string		
@WebServlet("/Servlet01")
public class Servlet01 extends HttpServlet {
    protected void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
        Cookie[] cookies = request.getCookies();
        boolean flag = true;
        if (cookies!=null && cookies.length!=0) {
            for (Cookie cookie : cookies) {
                if("lastTime".equals(cookie.getName())) {
                    flag = false;
                    response.getWriter().write("<h1>Welcome back, your last visit time is " + URLDecoder.decode(cookie.getValue(),"utf-8") + "!</h1>");

                    Date date = new Date();
                    SimpleDateFormat sdf = new SimpleDateFormat("yyyy/MM/dd HH:mm:ss"); //cookie包含TAB浏览器会报500的错
                    String str_date = sdf.format(date);
                    System.out.println(str_date);
                    //URL encode
                    str_date = URLEncoder.encode(str_date,"utf-8");
                    System.out.println(str_date);

                    cookie.setValue(str_date);
                    cookie.setMaxAge(60 * 60 * 24 * 30);
                    response.addCookie(cookie);

                    break;
                }
            }
        }

        if (flag) {
            response.getWriter().write("<h1>Hello, welcome for your first visit!</h1>");

            Date date = new Date();
            SimpleDateFormat sdf = new SimpleDateFormat("yyyy/MM/dd HH:mm:ss");
            String str_date = sdf.format(date);
            System.out.println(str_date);
            //URL encode
            str_date = URLEncoder.encode(str_date,"utf-8");
            System.out.println(str_date);

            Cookie cookie = new Cookie("lastTime", str_date);
            cookie.setMaxAge(60 * 60 * 24 * 30);
            response.addCookie(cookie);
        }
        
    }

    protected void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
        this.doPost(request,response);
    }
}

## Session
	1. 概念：服务器端会话技术，只能在一次会话的多次请求间共享数据，将数据保存在服务器端的对象中。HttpSession
	2. 快速入门：
		1. 获取HttpSession对象：
			HttpSession session = request.getSession();
		2. 使用HttpSession对象：
			Object getAttribute(String name)  
			void setAttribute(String name, Object value)
			void removeAttribute(String name)  
			
@WebServlet("/session1")
public class session1 extends HttpServlet {
    protected void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
        HttpSession session = request.getSession();
        session.setAttribute("msg","hello session!");
    }

    protected void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
        this.doPost(request,response);
    }
}

@WebServlet("/session2")
public class session2 extends HttpServlet {
    protected void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
        HttpSession session = request.getSession();
        Object msg = session.getAttribute("msg");
        System.out.println(msg);
    }

    protected void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
        this.doPost(request,response);
    }
}

3. 原理
		* Session的实现是依赖于Cookie的。  JSESSIONID
		
		1. 当客户端关闭后，服务器不关闭，两次获取session不是同一个。
			* 如果需要相同，则可以创建Cookie,键为JSESSIONID，设置最大存活时间，让cookie持久化保存。
				 Cookie c = new Cookie("JSESSIONID",session.getId());
		         c.setMaxAge(60*60);
		         response.addCookie(c);
				 
		客户端不关闭，服务器关闭后，两次获取的session不是同一个，但是要确保数据不丢失。tomcat自动完成以下工作  war->web apps
				* session的钝化：
					* 在服务器正常关闭之前，将session对象系列化到硬盘上
				* session的活化：
					* 在服务器启动后，将session文件转化为内存中的session对象即可。
					
		session销毁
			1. 服务器关闭
			2. session对象调用invalidate() 。
			3. session默认失效时间 30分钟
				选择性配置修改	
				<session-config>
			        <session-timeout>30</session-timeout>
			    </session-config>
				
* session与Cookie的区别：
		1. session存储数据在服务器端，Cookie在客户端
		2. session没有数据大小限制，Cookie有
		3. session数据安全，Cookie相对不安全

Session Case
