## redis
NOSQL (NoSQL = Not Only SQL)，意即“不仅仅是SQL”，是一项全新的数据库理念，泛指非关系型的数据库。
Redis支持的键值数据类型如下：
	1) 字符串类型 string
	2) 哈希类型 hash
	3) 列表类型 list
	4) 集合类型 set
	5) 有序集合类型 sortedset

1) 字符串类型 string
127.0.0.1:6379> set username cass
OK
127.0.0.1:6379> get username
"cass"
127.0.0.1:6379> del username
(integer) 1

2) 哈希类型 hash
127.0.0.1:6379> hset myhash username cass
(integer) 1
127.0.0.1:6379> hset myhash age 23
(integer) 1
127.0.0.1:6379> hget myhash username
"cass"
127.0.0.1:6379> hgetall myhash
1) "username"
2) "cass"
3) "age"
4) "23"
127.0.0.1:6379> hdel myhash username
(integer) 1

3) 列表类型 list:可以添加一个元素到列表的头部（左边）或者尾部（右边）
	1. 添加：
		1. lpush key value: 将元素加入列表左表
			
		2. rpush key value：将元素加入列表右边
			
			127.0.0.1:6379> lpush myList a
			(integer) 1
			127.0.0.1:6379> lpush myList b
			(integer) 2
			127.0.0.1:6379> rpush myList c
			(integer) 3
	2. 获取：
		* lrange key start end ：范围获取
			127.0.0.1:6379> lrange myList 0 -1
			1) "b"
			2) "a"
			3) "c"
	3. 删除：
		* lpop key： 删除列表最左边的元素，并将元素返回
		* rpop key： 删除列表最右边的元素，并将元素返回

4) 集合类型 set ： 不允许重复元素
	1. 存储：sadd key value
		127.0.0.1:6379> sadd myset a
		(integer) 1
		127.0.0.1:6379> sadd myset a
		(integer) 0
	2. 获取：smembers key:获取set集合中所有元素
		127.0.0.1:6379> smembers myset
		1) "a"
	3. 删除：srem key value:删除set集合中的某个元素	
		127.0.0.1:6379> srem myset a
		(integer) 1

5) 有序集合类型 sortedset：不允许重复元素，且元素有顺序.每个元素都会关联一个double类型的分数。redis正是通过分数来为集合中的成员进行从小到大的排序。
	1. 存储：zadd key score value
		127.0.0.1:6379> zadd mysort 60 zhangsan
		(integer) 1
		127.0.0.1:6379> zadd mysort 50 lisi
		(integer) 1
		127.0.0.1:6379> zadd mysort 80 wangwu
		(integer) 1
	2. 获取：zrange key start end [withscores]
		127.0.0.1:6379> zrange mysort 0 -1
		1) "lisi"
		2) "zhangsan"
		3) "wangwu"

		127.0.0.1:6379> zrange mysort 0 -1 withscores
		1) "zhangsan"
		2) "60"
		3) "wangwu"
		4) "80"
		5) "lisi"
		6) "500"
	3. 删除：zrem key value
		127.0.0.1:6379> zrem mysort lisi
		(integer) 1
		
通用命令
	1. keys * : 查询所有的键
	2. type key ： 获取键对应的value的类型
	3. del key：删除指定的key value
	
持久化
1. RDB：默认方式，不需要进行配置，默认就使用这种机制
	* 在一定的间隔时间中，检测key的变化情况，然后持久化数据
	1. redis.windwos.conf文件
		#   after 900 sec (15 min) if at least 1 key changed
		save 900 1
		#   after 300 sec (5 min) if at least 10 keys changed
		save 300 10
		#   after 60 sec if at least 10000 keys changed
		save 60 10000
		
		C:\Users\10492\Desktop\JAVA WEB\redis-2.8.9>redis-server.exe redis.windows.conf
		
2. AOF：C:\Users\10492\Desktop\JAVA WEB\redis-2.8.9>redis-server.exe redis.windows.conf
	1. redis.windwos.conf文件
		appendonly no（关闭aof） --> appendonly yes （开启aof）
		
		# appendfsync always ： 每一次操作都进行持久化
		appendfsync everysec ： 每隔一秒进行一次持久化
		# appendfsync no	 ： 不进行持久化
		
		C:\Users\10492\Desktop\JAVA WEB\redis-2.8.9>redis-server.exe redis.windows.conf

============================================================================================		
## Jedis
java操作redis数据库的工具
1) String
@Test
public void test1() {	
	//get connection
	Jedis jedis = new Jedis("localhost",6379);
	//manipulation
	jedis.set("username","cass");
	jedis.setex("excode",20,"dean..."); //temp data, expire after 20 sec   case：激活码有效期
	System.out.println(jedis.get("username")); //cass
	//release resources
	jedis.close();
}

127.0.0.1:6379> get username
"cass"

2) hash
@Test
public void test2() {
	Jedis jedis = new Jedis("localhost",6379);

	jedis.hset("user","username","cass");
	jedis.hset("user","age","23");
	//System.out.println(jedis.hget("user","username")); //cass
	Map<String, String> user = jedis.hgetAll("user");
	Set<String> strings = user.keySet();
	for (String string : strings) {
		System.out.println(string +"="+ user.get(string));
	}
	jedis.close();
}

3) list
jedis.lpush("mylist","a","b","c"); //从左边
jedis.rpush("mylist","a","b","c"); //从右边
List<String> mylist = jedis.lrange("mylist", 0, -1);
System.out.println(mylist); //[c, b, a, a, b, c]
String element1 = jedis.lpop("mylist"); //c

4) set
jedis.sadd("myset","java","php","c++");
Set<String> myset = jedis.smembers("myset");
System.out.println(myset);

5) sortedset
jedis.zadd("mysortedset",3,"cass");
jedis.zadd("mysortedset",30,"dean");
jedis.zadd("mysortedset",55,"sam");
System.out.println(jedis.zrange("mysortedset",0,-1)); //[cass, dean, sam]

=========================================================================
## Jedis 连接池
JedisPoolConfig config = new JedisPoolConfig();
config.setMaxTotal(10);
JedisPool jedisPool = new JedisPool(config,"localhost",6379); //or new JedisPool() by default
Jedis jedis = jedisPool.getResource();
jedis.set("name","adam");
System.out.println(jedis.get("name")); //adam
jedis.close(); //return resource

JedisPoolUtils 工具类
public class JedisPoolUtils {
    private static JedisPool jedisPool;

    static {
        InputStream fis = JedisPoolUtils.class.getClassLoader().getResourceAsStream("jedis1.properties");
        Properties pro = new Properties();
        try {
            pro.load(fis);
        } catch (IOException e) {
            e.printStackTrace();
        }
        JedisPoolConfig config = new JedisPoolConfig();
        config.setMaxTotal(Integer.parseInt(pro.getProperty("maxTotal")));
        config.setMaxIdle(Integer.parseInt(pro.getProperty("maxIdle")));
        jedisPool = new JedisPool(config,"localhost",6379);
    }

    public static Jedis getJedis() {
        return jedisPool.getResource();
    }
}

## 案例：
案例需求：
	1. 提供index.html页面，页面中有一个省份 下拉列表
	2. 当 页面加载完成后 发送ajax请求，加载所有省份
<script>
$(function () {
	$.get("provinceServlet",{},function (data) { //data:[{"id":1,"name":"IL"},{"id":2,"name":"LA"},{"id":3,"name":"CA"},{"id":4,"name":"NY"}]  String out = "[{\"id\":1,\"name\":\"IL\"},{\"id\":2,\"name\":\"LA\"},{\"id\":3,\"name\":\"CA\"},{\"id\":4,\"name\":\"NY\"}]";
		var province = $("#province");
		//iter
		$(data).each(function () {
			//<option>
			var option = "<option name='"+this.id+"'>"+this.name+"</option>";
			province.append(option);
		});
	},"json");		
});	
</script>	

//Cache optimization by redis
Jedis jedis = JedisPoolUtils.getJedis();
String province = jedis.get("province");
if (province==null || province.length()==0) {
	System.out.println("no data in redis!");
	List<Province> list = service.findAll();
	ObjectMapper mapper = new ObjectMapper();
	province = mapper.writeValueAsString(list);
	jedis.set("province",province);	
	jedis.close();
} else {
	System.out.println("data in redis!");
}
System.out.println(province);
return province;

response.getWriter().write(province);

