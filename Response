响应消息：服务器端发送给客户端的数据
* 数据格式：
	1. 响应行
		1. 组成：协议/版本 响应状态码 状态码描述
		2. 响应状态码：服务器告诉客户端浏览器本次请求和响应的一个状态。
			1. 状态码都是3位数字 
			2. 分类：
				1. 1xx：服务器就收客户端消息，但没有接受完成，等待一段时间后，发送1xx多状态码
				2. 2xx：成功。代表：200
				3. 3xx：重定向。代表：302(重定向)，304(访问缓存)
				4. 4xx：客户端错误。
					* 代表：
						* 404（请求路径没有对应的资源） 
						* 405：请求方式没有对应的doXxx方法
				5. 5xx：服务器端错误。代表：500(服务器内部出现异常)
					
			
	2. 响应头：
		1. 格式：头名称： 值
		2. 常见的响应头：
			1. Content-Type：服务器告诉客户端本次响应体数据格式以及编码格式
			2. Content-disposition：服务器告诉客户端以什么格式打开响应体数据
				* 值：
					* in-line:默认值,在当前页面内打开
					* attachment;filename=xxx：以附件形式打开响应体。文件下载
	3. 响应空行
	4. 响应体:传输的数据


* 响应字符串格式
	HTTP/1.1 200 OK
	Content-Type: text/html;charset=UTF-8
	Content-Length: 101
	Date: Wed, 06 Jun 2018 07:08:42 GMT

	响应消息：服务器端发送给客户端的数据
		* 数据格式：
			1. 响应行
				1. 组成：协议/版本 响应状态码 状态码描述
				2. 响应状态码：服务器告诉客户端浏览器本次请求和响应的一个状态。
					1. 状态码都是3位数字 
					2. 分类：
						1. 1xx：服务器就收客户端消息，但没有接受完成，等待一段时间后，发送1xx多状态码
						2. 2xx：成功。代表：200
						3. 3xx：重定向。代表：302(重定向)，304(访问缓存)
						4. 4xx：客户端错误。
							* 代表：
								* 404（请求路径没有对应的资源） 
								* 405：请求方式没有对应的doXxx方法
						5. 5xx：服务器端错误。代表：500(服务器内部出现异常)
							
					
			2. 响应头：
				1. 格式：头名称： 值
				2. 常见的响应头：
					1. Content-Type：服务器告诉客户端本次响应体数据格式以及编码格式
					2. Content-disposition：服务器告诉客户端以什么格式打开响应体数据
						* 值：
							* in-line:默认值,在当前页面内打开
							* attachment;filename=xxx：以附件形式打开响应体。文件下载
			3. 响应空行
			4. 响应体:传输的数据


		* 响应字符串格式
			HTTP/1.1 200 
			Content-Type: text/html;charset=UTF-8
			Content-Length: 93
			Date: Sun, 03 May 2020 13:33:43 GMT
			Keep-Alive: timeout=20
			Connection: keep-alive
	
			<html>
			  <head>
			    <title>$Title$</title>
			  </head>
			  <body>
			  hello , response
			  </body>
			</html>
			

## Response对象
* 功能：设置响应消息
	1. 设置响应行
		1. 格式：HTTP/1.1 200 ok
		2. 设置状态码：setStatus(int sc) 
	2. 设置响应头：setHeader(String name, String value) 
		
	3. 设置响应体：
		* 使用步骤：
			1. 获取输出流
				* 字符输出流：PrintWriter getWriter()

				* 字节输出流：ServletOutputStream getOutputStream()

			2. 使用输出流，将数据输出到客户端浏览器
			
===================================================
重定向
@WebServlet("/response01")
public class Response01 extends HttpServlet {
    protected void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
        System.out.println("response01....");
        /**
        //重定向到/response02
        //设置状态码302
        response.setStatus(302);
        response.setHeader("location","/responseCase1/response02");
         */

        response.sendRedirect("/responseCase1/response02"); //ServletResponse定义的重定向方法
    }

    protected void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
        this.doPost(request,response);
    }
}

@WebServlet("/response02")
public class Response02 extends HttpServlet {
    protected void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
        System.out.println("response02...");
    }

    protected void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
        this.doPost(request,response);
    }
}

response01....
response02...

forward 和 redirect 区别
* 重定向的特点:redirect
	1. 地址栏发生变化
	2. 重定向可以访问其他站点(服务器)的资源
	3. 重定向是两次请求(302-200)。不能使用request对象来共享数据(两次请求有两个req对象)
* 转发的特点：forward
	1. 转发地址栏路径不变
	2. 转发只能访问当前服务器下的资源
	3. 转发是一次请求，可以使用request对象来共享数据
	
相对路径
	* ./：当前目录
	* ../:后退一级目录
	
* 给客户端浏览器使用：需要加虚拟目录(项目的访问路径)
	* 建议虚拟目录动态获取：request.getContextPath()
	* <a> , <form> 重定向...
* 给服务器使用：不需要加虚拟目录
	* 转发路径
	
String contextPath = request.getContextPath(); //路径不写死，修改contextPath之后会动态变化
response.sendRedirect(contextPath + "/response02"); 

//==============================================================================
//服务器输出字符数据到浏览器
PrintWriter writer = response.getWriter();
writer.write("<h1>hello -from response</h1>");

response.setContentType("text/html;charset=utf-8"); //设置流的编码为UTF-8并告诉浏览器用UTF-8解码
PrintWriter writer = response.getWriter();
writer.write("<h1>你好你好 -from response</h1>1232");

//服务器输出字节数据到浏览器
response.setContentType("text/html;charset=utf-8");
ServletOutputStream os = response.getOutputStream();
os.write("你好你好, cass".getBytes("utf-8"));

//===============================================================================
//验证码
@WebServlet("/check")
public class Servlet01 extends HttpServlet {
    protected void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
        //create img
        int width = 100;
        int height = 50;
        BufferedImage img = new BufferedImage(100,50,BufferedImage.TYPE_INT_RGB);
        Graphics gra = img.getGraphics(); //画笔对象
        gra.setColor(Color.PINK);
        gra.fillRect(0,0,width,height); //填充背景颜色

        gra.setColor(Color.BLUE);
        gra.drawRect(0,0,width-1,height-1); //add border

        //add verify code
        String str = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789";
        Random ran = new Random();

        for (int i = 1; i < 5; i++) {
            char cha = str.charAt(ran.nextInt(str.length()));
            gra.drawString(cha+"",20*i,25);
        }

        //画干扰线
        gra.setColor(Color.GREEN);
        for (int i = 1; i < 7; i++) {
            int x1 = ran.nextInt(width);
            int x2 = ran.nextInt(width);
            int y1 = ran.nextInt(height);
            int y2 = ran.nextInt(height);
            gra.drawLine(x1,y1,x2,y2);
        }

        //output to page
        ImageIO.write(img,"jpg",response.getOutputStream());

    }

    protected void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
        this.doPost(request,response);
    }
}

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>Register Page</title>
    <script>
        window.onload = function () {
            var checkImg = document.getElementById("checkImg");
            var link = document.getElementById("change");

            checkImg.onclick = function () {
                var date = new Date().getTime();
                checkImg.src = "/checkCode/check?" + date; //避免服务器缓存
            }
            link.onclick = function () {
                var date = new Date().getTime();
                checkImg.src = "/checkCode/check?" + date;
            }

        }
    </script>
</head>
<body>
    <img src="/checkCode/check" id="checkImg">
    <a href="" id="change">Not clear?</a>
</body>
</html>

//ServletContext
1. 概念：代表整个web应用，可以和程序的容器(服务器)来通信
2. 获取：
	1. 通过request对象获取
		request.getServletContext();
	2. 通过HttpServlet获取
		this.getServletContext();
ServletContext servletContext = request.getServletContext();
ServletContext servletContext1 = this.getServletContext();
System.out.println(servletContext); //org.apache.catalina.core.ApplicationContextFacade@57f4af17
System.out.println(servletContext1); //org.apache.catalina.core.ApplicationContextFacade@57f4af17

3. 功能：
	1. 获取MIME类型：
		* MIME类型:在互联网通信过程中定义的一种文件数据类型
			* 格式： 大类型/小类型   text/html		image/jpeg

		* 获取：String getMimeType(String file)  
		
		ServletContext servletContext = request.getServletContext();
        String file = "img.jpg";
        String mimeType = servletContext.getMimeType(file);
        System.out.println(mimeType); //image/jpeg
		
	2. 域对象：共享数据
		1. setAttribute(String name,Object value)
		2. getAttribute(String name)
		3. removeAttribute(String name)

		* ServletContext对象范围：所有用户所有请求的数据
	3. 获取文件的真实(服务器)路径(mark)
		1. 方法：String getRealPath(String path)  
			 String b = context.getRealPath("/b.txt");//web目录下资源访问
			 System.out.println(b);
	
			String c = context.getRealPath("/WEB-INF/c.txt");//WEB-INF目录下的资源访问
			System.out.println(c);
	
			String a = context.getRealPath("/WEB-INF/classes/a.txt");//src目录下的资源访问
			System.out.println(a);
			
File Download Case:
1.Simple page with a link
2.click then pop up a download alert
3.finish file download

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>DownLoad Page</title>
</head>
<body>
    <a href="/downloadCase/DownloadServlet?filename=1.jpg">Click to download img1</a><br>
    <a href="/downloadCase/DownloadServlet?filename=2.jpg">Click to download img2</a>

</body>
</html>

@WebServlet("/DownloadServlet")
public class DownloadServlet extends HttpServlet {
    protected void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
        //字节流读取文件
        String filename = request.getParameter("filename");
        ServletContext servletContext = this.getServletContext();
        String path = servletContext.getRealPath("/img/" + filename);
        FileInputStream fis = new FileInputStream(path);

        //设置res响应头
        response.setHeader("content-type",servletContext.getMimeType(filename));
        response.setHeader("content-disposition","attachment;filename=" + filename); //设置浏览器解析方式，附件形式  "attachment;filename"固定写法，+filename弹框显示信息

        //字节输出流输出
        ServletOutputStream os = response.getOutputStream();
        byte[] bytes = new byte[1024];
        int len = 0;
        while ((len = fis.read(bytes)) != -1) {
            os.write(bytes,0,len);
        }

        fis.close();

    }

    protected void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
        this.doPost(request,response);
    }
}